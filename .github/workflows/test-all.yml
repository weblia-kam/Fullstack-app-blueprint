name: Test All (manual)

on:
  workflow_dispatch: {}

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - "5432:5432"
        options: >-
          --health-cmd="pg_isready -U postgres -d testdb"
          --health-interval=5s --health-timeout=5s --health-retries=10
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb?schema=public
      JWT_SECRET: test-secret
      COOKIE_SECRET: test-cookie
      ENCRYPTION_KEY: test-encryption
      API_CORS_ORIGINS: http://localhost:3000
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm --filter ./packages/db prisma generate || pnpm prisma generate
      - run: npx prisma migrate deploy
      - run: pnpm db:seed || echo "no seed"
      - run: pnpm --filter ./apps/api test

  contract:
    runs-on: ubuntu-latest
    needs: unit
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - "5432:5432"
        options: >-
          --health-cmd="pg_isready -U postgres -d testdb"
          --health-interval=5s --health-timeout=5s --health-retries=10
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb?schema=public
      JWT_SECRET: test-secret
      COOKIE_SECRET: test-cookie
      ENCRYPTION_KEY: test-encryption
      API_CORS_ORIGINS: http://localhost:3000
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm --filter ./packages/db prisma generate || pnpm prisma generate
      - run: npx prisma migrate deploy
      - run: pnpm db:seed || echo "no seed"
      - run: pnpm build:api
      - run: pnpm start:api:ci &
        shell: bash
      - run: npx wait-on http://localhost:3000/health || npx wait-on http://localhost:3000
      - run: pnpm --filter ./apps/api test:contract

  e2e-web:
    runs-on: ubuntu-latest
    needs: contract
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - "5432:5432"
        options: >-
          --health-cmd="pg_isready -U postgres -d testdb"
          --health-interval=5s --health-timeout=5s --health-retries=10
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb?schema=public
      JWT_SECRET: test-secret
      COOKIE_SECRET: test-cookie
      ENCRYPTION_KEY: test-encryption
      API_CORS_ORIGINS: http://localhost:3000
      NEXT_PUBLIC_API_ORIGIN: http://localhost:3000
      API_BASE_PATH: /api/v1
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm --filter ./packages/db prisma generate || pnpm prisma generate
      - run: npx prisma migrate deploy
      - run: pnpm db:seed || echo "no seed"
      - run: pnpm build:api
      - run: pnpm start:api:ci &
        shell: bash
      - run: npx wait-on http://localhost:3000/health || npx wait-on http://localhost:3000
      - run: pnpm build:web
      - run: pnpm --filter ./apps/web start -- --port 3001 &
        shell: bash
      - run: npx wait-on http://localhost:3001
      - run: npx playwright install --with-deps
      - run: pnpm --filter ./apps/web test:e2e

  e2e-mobile:
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - run: flutter pub get
        working-directory: apps/mobile
      - run: flutter test
        working-directory: apps/mobile

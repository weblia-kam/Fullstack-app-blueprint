name: Test All (manual)

on:
  workflow_dispatch: {}

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - "5432:5432"
        options: >-
          --health-cmd="pg_isready -U postgres -d testdb"
          --health-interval=5s --health-timeout=5s --health-retries=10
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb?schema=public
      JWT_SECRET: test-secret
      COOKIE_SECRET: test-cookie
      ENCRYPTION_KEY: test-encryption
      API_CORS_ORIGINS: http://localhost:3000
    steps:
      - uses: actions/checkout@v4
      - name: "Sanity: ensure Prisma schema exists"
        run: test -f packages/db/prisma/schema.prisma
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - name: Prisma generate
        run: npx prisma generate
        working-directory: packages/db
      - name: Prisma migrate
        run: npx prisma migrate deploy
        working-directory: packages/db
      - name: Seed database
        run: pnpm db:seed || echo "no seed"
      - run: pnpm --filter ./apps/api test

  contract:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: unit
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - "5432:5432"
        options: >-
          --health-cmd="pg_isready -U postgres -d testdb"
          --health-interval=5s --health-timeout=5s --health-retries=10
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb?schema=public
      JWT_SECRET: test-secret
      COOKIE_SECRET: test-cookie
      ENCRYPTION_KEY: test-encryption
      API_CORS_ORIGINS: http://localhost:3000
    steps:
      - uses: actions/checkout@v4
      - name: "Sanity: ensure Prisma schema exists"
        run: test -f packages/db/prisma/schema.prisma
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - name: Prisma generate
        run: npx prisma generate
        working-directory: packages/db
      - name: Prisma migrate
        run: npx prisma migrate deploy
        working-directory: packages/db
      - name: Seed database
        run: pnpm db:seed || echo "no seed"
      - run: pnpm --filter @org/domain build
      - run: pnpm build:api
      - name: Start API
        run: |
          nohup pnpm start:api:ci > api.log 2>&1 &
          echo $! > api.pid
        shell: bash
      - name: Wait for API (max 2m)
        run: |
          npx wait-on -t 120000 http://localhost:3000/health || npx wait-on -t 120000 http://localhost:3000
        shell: bash
      - run: echo "✅ API responded on expected port"
      - run: pnpm --filter ./apps/api test:contract
      - name: Print API logs on failure
        if: failure()
        run: |
          echo "---- api.log (tail) ----"
          tail -n 200 api.log || true
          echo "---- listening ports ----"
          ss -ltnp || true
        shell: bash
      - name: Stop API if running
        if: always()
        run: |
          if [ -f api.pid ]; then kill $(cat api.pid) 2>/dev/null || true; fi
        shell: bash

  e2e-web:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: contract
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - "5432:5432"
        options: >-
          --health-cmd="pg_isready -U postgres -d testdb"
          --health-interval=5s --health-timeout=5s --health-retries=10
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb?schema=public
      JWT_SECRET: test-secret
      COOKIE_SECRET: test-cookie
      ENCRYPTION_KEY: test-encryption
      API_CORS_ORIGINS: http://localhost:3000
      NEXT_PUBLIC_API_ORIGIN: http://localhost:3000
      API_BASE_PATH: /api/v1
    steps:
      - uses: actions/checkout@v4
      - name: "Sanity: ensure Prisma schema exists"
        run: test -f packages/db/prisma/schema.prisma
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - name: Prisma generate
        run: npx prisma generate
        working-directory: packages/db
      - name: Prisma migrate
        run: npx prisma migrate deploy
        working-directory: packages/db
      - name: Seed database
        run: pnpm db:seed || echo "no seed"
      - run: pnpm --filter @org/domain build
      - run: pnpm build:api
      - name: Start API
        run: |
          nohup pnpm start:api:ci > api.log 2>&1 &
          echo $! > api.pid
        shell: bash
      - name: Wait for API (max 2m)
        run: |
          npx wait-on -t 120000 http://localhost:3000/health || npx wait-on -t 120000 http://localhost:3000
        shell: bash
      - run: echo "✅ API responded on expected port"
      - run: pnpm build:web
      - name: Start Web
        run: |
          nohup pnpm --filter ./apps/web start -- --port 3001 > web.log 2>&1 &
          echo $! > web.pid
        shell: bash
      - name: Wait for Web (max 2m)
        run: |
          npx wait-on -t 120000 http://localhost:3001
        shell: bash
      - run: echo "✅ Web responded on expected port"
      - run: npx playwright install --with-deps
      - run: pnpm --filter ./apps/web test:e2e
      - name: Print API logs on failure
        if: failure()
        run: |
          echo "---- api.log (tail) ----"
          tail -n 200 api.log || true
          echo "---- listening ports ----"
          ss -ltnp || true
        shell: bash
      - name: Print Web logs on failure
        if: failure()
        run: |
          echo "---- web.log (tail) ----"
          tail -n 200 web.log || true
          echo "---- listening ports ----"
          ss -ltnp || true
        shell: bash
      - name: Stop API if running
        if: always()
        run: |
          if [ -f api.pid ]; then kill $(cat api.pid) 2>/dev/null || true; fi
        shell: bash
      - name: Stop Web if running
        if: always()
        run: |
          if [ -f web.pid ]; then kill $(cat web.pid) 2>/dev/null || true; fi
        shell: bash

  e2e-mobile:
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - run: flutter pub get
        working-directory: apps/mobile
      - run: flutter test
        working-directory: apps/mobile
